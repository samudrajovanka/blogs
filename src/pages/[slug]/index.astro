---
import DOMPurify from 'isomorphic-dompurify';
import hljs from 'highlight.js';
import { load as cheerioLoad } from 'cheerio';

import { BaseLayout } from '@/layouts';
import { Container, Text, Seo, Link } from '@/components/elements';
import { BlogTime, Tag, Back } from '@/components/ui';
import { getBlogBySlug, getBlogs } from "@/stores/blogStore";
import { getOriginalEmbedFromMedium, parseToIframe } from '@/lib/common';

import './styles.css';
import 'highlight.js/styles/a11y-light.min.css';

const { slug } = Astro.params;

if (!slug) {
  return Astro.redirect('/404');
}

// retrieve the blog if not already exists for the first time
await getBlogs.get();

const blog = getBlogBySlug(slug as string).get();

if (!blog) {
  return Astro.redirect('/404');
}

const contentWithoutTitle = blog.content.replace(/\n<h3>([\s\S]*?)<\/h3>/, '');
const contentSanitize = DOMPurify.sanitize(contentWithoutTitle);
const $content = cheerioLoad(contentSanitize);

// highlight pre element the code snippets
$content('pre').each((_, element) => {
  const codeHighlight = hljs.highlightAuto((element.children[0] as unknown as Text).data).value

  $content(element).html(`<code>${codeHighlight}</code>`);
});

// change media to embed iframe
const mediaLinks = $content('a[href*="https://medium.com/media/"]')

await Promise.all(mediaLinks.map(async (_, element) => {
  const mediaLink = $content(element).attr('href');

  if (!mediaLink) return null;
  
  const originalUrl = await getOriginalEmbedFromMedium(mediaLink);

  if (!originalUrl) return null;

  const iframeTag = parseToIframe(originalUrl);

  if (!iframeTag) return null;

  $content(element).replaceWith(iframeTag);
}).get());

---

<Seo
  title={blog.title}
  withSuffix
  keywords={blog.categories},
  thumbnail={blog.thumbnail},
  article={{
    authors: [blog.author],
    publishedTime: blog.pubDate,
    tags: blog.categories
  }},
/>

<BaseLayout>
  <Container class="flex justify-center gap-10">
    <div class="flex-1 max-w-3xl">
      <header>
        <Back href="/" />
        
        <Text as="h1" resetTypography class="text-3xl font-bold mt-4">{blog.title}</Text>
  
        <div class="mt-2 flex flex-col sm:flex-row gap-1 justify-between">
          <BlogTime
            content={blog.content}
            publishedDate={blog.pubDate}
          />

          <Link href={blog.link} isExternal typography="small">read on medium</Link>
        </div>
      </header>

      <hr class="my-10" />

      <div class="blog-content" set:html={$content.html()} />

      {blog.categories.length && (
        <div>
          <hr class="my-10" />

          <div class="flex gap-4 flex-wrap mt-2">
            {blog.categories.map(category => (
              <Tag>{category}</Tag>
            ))}
          </div>
        </div>
      )}
    </div>
  </Container>
</BaseLayout>
